FAIL EVIDENCE: On .replit.dev, while the Admin Settings page is visible:
(async()=>{console.log(await fetch('/api/admin/whoami',{credentials:'include'}).then(r=>r.json()))})();
(async()=>{console.log(await fetch('/api/admin/sections',{credentials:'include'}).then(r=>r.json()))})();
returns 401 {error:"unauthorized"}. If the page renders while unauthenticated, the guards are still broken.
Fix ONLY the auth flow (no refactors) and show BROWSER proof:
1) Server guard must run BEFORE serving React
app.get('/admin/login', renderLogin); // public

app.get('/admin/*', (req,res,next)=>{
  if (!req.session?.user) {
    const rt = encodeURIComponent(req.originalUrl);
    return res.redirect(302, `/admin/login?returnTo=${rt}`);
  }
  next();
});

// Static SPA fallback AFTER the guard:
app.use(express.static('dist'));
app.get('*', (_req,res)=>res.sendFile(path.join(__dirname,'dist','index.html')));
2) Client guard must wrap the route actually used
// client/src/components/RequireAdmin.tsx
import { useEffect, useState } from 'react';
export default function RequireAdmin({ children }:{children:React.ReactNode}) {
  const [ok,setOk]=useState<boolean|null>(null);
  useEffect(()=>{
    fetch('/api/admin/whoami',{credentials:'include'})
      .then(r=>r.ok?r.json():{authenticated:false})
      .then(j=>setOk(!!j?.authenticated))
      .catch(()=>setOk(false));
  },[]);
  if (ok===null) return null;
  if (!ok) { const rt=encodeURIComponent(location.pathname+location.search+location.hash);
    location.href=`/admin/login?returnTo=${rt}`; return null; }
  return <>{children}</>;
}

// routes
<Route path="/admin/*" element={<RequireAdmin><AdminLayout/></RequireAdmin>}>
  <Route path="settings" element={<AdminSettingsPage/>} />
</Route>
3) Header button must force a FULL navigation
<a href="/admin/settings" rel="nofollow">Admin Settings</a>
// or: <Link to="/admin/settings" reloadDocument>Admin Settings</Link>
4) Preview must hit Express (dev proxy)
// vite.config.ts
export default defineConfig({
  server:{ proxy:{ '^/(api|admin)(/.*)?':{ target:'http://localhost:5000', changeOrigin:true } } }
});
5) Cookie flags per request (verify)
app.set('trust proxy',1);
app.use((req,_res,next)=>{
  if(req.session){
    const https = req.secure || req.get('x-forwarded-proto')==='https';
    req.session.cookie.secure   = https;
    req.session.cookie.sameSite = https ? 'none' : 'lax';
    req.session.cookie.path     = '/';
    req.session.cookie.httpOnly = true;
  }
  next();
});
Definition of DONE (must show browser screenshots, not curl):
1.	Incognito → click Admin Settings on home page → Document request for /admin/settings is 302 to /admin/login?....
2.	After login on .replit.dev, Network shows Set-Cookie: sid=…; SameSite=None; Secure; Path=/.
3.	In the same tab:
4.	(async()=>{console.log(await fetch('/api/admin/whoami',{credentials:'include'}).then(r=>r.json()))})();
→ {authenticated:true}.
5.	While logged out, the Admin Settings page never renders (no 401s piling up)—it redirects to /admin/login.
Do not mark complete until all 4 pass with screenshots.

