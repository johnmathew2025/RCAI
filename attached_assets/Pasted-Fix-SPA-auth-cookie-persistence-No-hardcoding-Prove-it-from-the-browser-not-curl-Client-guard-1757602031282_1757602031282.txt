Fix SPA auth + cookie persistence. No hardcoding. Prove it from the browser (not curl).
Client guard for SPA clicks
// client/src/components/RequireAdmin.tsx
import { useEffect, useState } from 'react';
export default function RequireAdmin({ children }: { children: React.ReactNode }) {
  const [ok, setOk] = useState<boolean | null>(null);
  useEffect(() => {
    fetch('/api/admin/whoami', { credentials:'include' })
      .then(r => r.ok ? r.json() : Promise.reject(r))
      .then(j => setOk(Boolean(j?.authenticated))).catch(() => setOk(false));
  }, []);
  if (ok === null) return null;
  if (!ok) { const rt = encodeURIComponent(location.pathname+location.search+location.hash);
    location.href = `/admin/login?returnTo=${rt}`; return null; }
  return <>{children}</>;
}

// client/src/pages/admin-settings.tsx
export default function AdminSettingsPage() {
  return <RequireAdmin><AdminSettings/></RequireAdmin>;
}
Header button must be a full navigation (not SPA-only Link):
<a href="/admin/settings" rel="nofollow">Admin Settings</a>
Ensure every admin fetch includes cookies
Use the central API helper with credentials:"include". The AI Settings calls must be:
GET /api/admin/ai/providers
POST /api/admin/ai/providers
PUT  /api/admin/ai/providers/:id/activate
GET  /api/admin/ai/providers/status
(Under /api/admin/..., not /api/....)
Cookie flags per request (already server-side, verify)
After express-session:
app.set('trust proxy', 1);
app.use((req,_res,next)=>{
  if (req.session){
    const https = req.secure || req.get('x-forwarded-proto')==='https';
    req.session.cookie.secure   = https;
    req.session.cookie.sameSite = https ? 'none' : 'lax';
    req.session.cookie.path     = '/';
    req.session.cookie.httpOnly = true;
  }
  next();
});
Vite proxy (so full loads hit the guard in preview)
// vite.config.ts
export default defineConfig({
  server:{ proxy:{ '^/(api|admin)(/.*)?': { target:'http://localhost:5000', changeOrigin:true } } }
});
Definition of done (browser evidence, not curl):
Incognito → open /admin/settings → redirected to /admin/login?....
Login response shows Set-Cookie: sid=…; SameSite=None; Secure; Path=/ on .replit.dev.
Console:
await fetch('/api/admin/whoami',{credentials:'include'}).then(r=>r.json()) → {authenticated:true}.
From the main page, clicking Admin Settings while logged out redirects to /admin/login (proves the client guard works).
Saving a provider shows 200 sequence for the four /api/admin/ai/providers* calls.