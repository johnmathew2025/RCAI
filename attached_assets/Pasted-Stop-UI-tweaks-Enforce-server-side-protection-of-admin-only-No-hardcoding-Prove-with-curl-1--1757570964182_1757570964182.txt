Stop UI tweaks. Enforce server-side protection of /admin/* only. No hardcoding. Prove with curl.
1.	Middleware order (in server/index.ts)
// sessions first
app.set('trust proxy', 1);
app.use(session({
  name: 'sid',
  secret: process.env.SESSION_SECRET!,
  resave: false,
  saveUninitialized: false,
  cookie: { secure: 'auto', sameSite: 'lax', httpOnly: true, path: '/' }
}));
// per-request SameSite/Secure
app.use((req,_res,next)=>{
  if (req.session){
    const https = req.secure || req.get('x-forwarded-proto') === 'https';
    req.session.cookie.secure   = https;
    req.session.cookie.sameSite = https ? 'none' : 'lax';
  }
  next();
});

// LOGIN PAGE must be BEFORE any /admin/* guard
app.get('/admin/login', loginPageHandler);

// --- ADMIN API guarded ---
function isAdmin(req){ return !!(req.session?.user?.roles?.includes('admin')); }
function requireAdminApi(req,res,next){ return isAdmin(req) ? next() : res.status(401).json({error:'unauthorized'}); }
const adminApi = require('express').Router();
adminApi.use(requireAdminApi);
adminApi.get('/whoami', (req,res)=>res.json({authenticated:true,roles:['admin']}));
adminApi.get('/sections', (_req,res)=> {
  const csv = (process.env.ADMIN_SECTIONS||'ai,evidence,taxonomy,workflow,status,debug');
  res.json({ sections: csv.split(',').map(s=>s.trim()).filter(Boolean) });
});
app.use('/api/admin', adminApi);

// --- ADMIN PAGES guarded (EXCLUDES /admin/login) ---
function requireAdminPage(req,res,next){
  if (isAdmin(req)) return next();
  return res.redirect('/admin/login?returnTo=' + encodeURIComponent(req.originalUrl));
}
app.get('/admin/settings', requireAdminPage, serveApp);
app.get('/admin/*', requireAdminPage, serveApp);

// static + SPA catch-all MUST be LAST
// app.use(express.static(...));
// app.get('*', serveApp);
Login handler must set session
// POST /api/auth/login (after verifying credentials)
req.session.user = { id:user.id, email:user.email, roles:['admin'] };
res.json({ ok:true, returnTo:req.body?.returnTo || '/admin/settings#evidence' });
2.	Do NOT gate the public app. Keep / public. Do NOT wrap the whole app in any auth guard. Only /admin/* is protected.
3.	Run these and paste the raw output (no screenshots):
bash -lc '
BASE=${BASE:-http://localhost:5000}; COOKIE=/tmp/a.sid; rm -f "$COOKIE"

echo "== 1) GET /admin/login =="; curl -i "$BASE/admin/login" | sed -n "1,3p"

echo "== 2) GET /admin/settings (logged OUT) =="; curl -i "$BASE/admin/settings" | sed -n "1,5p"

echo "== 3) Login =="; curl -i -c "$COOKIE" -H "Content-Type: application/json" \
  -d "{\"email\":\"$SETUP_ADMIN_EMAIL\",\"password\":\"$SETUP_ADMIN_PASSWORD\"}" \
  "$BASE/api/auth/login" | egrep -i "HTTP/|set-cookie: sid|samesite|secure|path"

echo "== 4) GET /admin/settings (logged IN) =="; curl -i -b "$COOKIE" "$BASE/admin/settings" | sed -n "1,3p"

echo "== 5) whoami =="; curl -s -b "$COOKIE" "$BASE/api/admin/whoami"; echo

echo "== 6) sections =="; curl -s -b "$COOKIE" "$BASE/api/admin/sections"; echo
'
Pass criteria (all required):
•	Step 1: /admin/login → HTTP/1.1 200 (always renders).
•	Step 2: /admin/settings (logged out) → 302 to /admin/login?returnTo=....
•	Step 3: login shows Set-Cookie: sid=... (with Secure; SameSite=None on HTTPS).
•	Step 4: /admin/settings (logged in) → 200.
•	Step 5: {"authenticated":true,...}.
•	Step 6: {"sections":["ai","evidence","taxonomy","workflow","status","debug"]}.
Do not claim “done” without posting these 6 blocks of text. If any fails, fix route order or session setup accordingly.

